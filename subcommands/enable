#!/usr/bin/env bash
source "$PLUGIN_AVAILABLE_PATH/letsencrypt/command-functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/config/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/certs/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/domains/functions"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x


letsencrypt_create_root() {
  #shellcheck disable=SC2034
  declare desc="Ensure the let's encrypt root directory exists"
  declare APP="$1"

  local app_root="$DOKKU_ROOT/$APP"
  local le_root="$app_root/letsencrypt"

  mkdir -p "$le_root"

  if [[ ! -f "$DOKKU_ROOT/$app/nginx.conf" ]]; then
    dokku_log_info1 "Setting temporary site"
    local NGINX_ACCESS_LOG_FORMAT="$(fn-nginx-access-log-format "$APP")"
    local NGINX_ACCESS_LOG_PATH="$(fn-nginx-access-log-path "$APP")"
    local NGINX_ERROR_LOG_PATH="$(fn-nginx-error-log-path "$APP")"

    sigil -f "$PLUGIN_AVAILABLE_PATH/letsencrypt/templates/default-nginx.conf.sigil" \
      DOMAINS="$(get_app_domains "$APP" | xargs)" DOKKU_ROOT="$DOKKU_ROOT" APP="$APP" \
      NGINX_ACCESS_LOG_FORMAT="$NGINX_ACCESS_LOG_FORMAT" NGINX_ACCESS_LOG_PATH="$NGINX_ACCESS_LOG_PATH" \
      NGINX_ERROR_LOG_PATH="$NGINX_ERROR_LOG_PATH" \
      >"$DOKKU_ROOT/$app/nginx.conf"
    restart_nginx | sed "s/^/       /"
  fi
}

letsencrypt_format_timediff() {
  #shellcheck disable=SC2034
  declare desc="format a time difference in seconds into a human-readable string"
  local td="$1"
  local negative_td=0

  if [ "$td" -lt 0 ]; then
    negative_td=1
    td=$((-td))
  fi

  local days=$((td / (24 * 60 * 60)))
  td=$((td % (24 * 60 * 60)))

  local hours=$((td / (60 * 60)))
  td=$((td % (60 * 60)))

  local minutes=$((td / 60))
  local secs=$((td % 60))

  local res=""
  if [ $days -gt 0 ]; then
    res="${days}d, "
  fi

  if [ $hours -gt 0 ]; then
    res="${res}${hours}h, "
  fi

  if [ $minutes -gt 0 ]; then
    res="${res}${minutes}m, "
  fi

  if [ $secs -gt 0 ]; then
    res="${res}${secs}s, "
  fi

  # remove trailing comma
  res="$(echo "$res" | sed -re 's/, ?$//g')"

  if [[ $negative_td == 1 ]]; then
    res="${res} ago"
  fi

  echo "$res"
}

letsencrypt_get_expirydate() {
  #shellcheck disable=SC2034
  declare desc="print SSL certificate expiry date as UNIX timestamp"
  local app="$1"

  if [[ -f "$DOKKU_ROOT/$app/tls/server.letsencrypt.crt" ]]; then
    date -u -d "$(openssl x509 -in "$DOKKU_ROOT/$app/tls/server.letsencrypt.crt" -enddate -noout | sed -e "s/^notAfter=//")" "+%s"
  else
    date -u -d "$(openssl x509 -in "$DOKKU_ROOT/$app/tls/server.crt" -enddate -noout | sed -e "s/^notAfter=//")" "+%s"
  fi
}

letsencrypt_is_active() {
  #shellcheck disable=SC2034
  declare desc="checks if app is secured by let's encrypt"
  local app=$1

  # check if SSL is enabled on per-app level
  is_ssl_enabled "$app" || return 1
  local domain="$(get_app_domains "$app" | xargs | awk '{print $1}')"

  # check if certificate is identical to the current let's encrypt certificate by comparing SHA1 hashes
  local cert_sha1
  if [[ -f "$DOKKU_ROOT/$app/tls/server.letsencrypt.crt" ]]; then
    cert_sha1=$( (cat "$DOKKU_ROOT/$app/tls/server.letsencrypt.crt" 2>/dev/null) | sha1sum || echo "not_found")
  else
    cert_sha1=$( (cat "$DOKKU_ROOT/$app/tls/server.crt" 2>/dev/null) | sha1sum || echo "not_found")
  fi

  local le_sha1="not_found"
  if [[ -f "$DOKKU_ROOT/$app/letsencrypt/certs/current/certificates/$domain.pem" ]]; then
    le_sha1=$( (cat "$DOKKU_ROOT/$app/letsencrypt/certs/current/certificates/$domain.crt" 2>/dev/null) | sha1sum || echo "not_found")
  elif [[ -f "$DOKKU_ROOT/$app/letsencrypt/certs/current/fullchain.pem" ]]; then
    le_sha1=$( (cat "$DOKKU_ROOT/$app/letsencrypt/certs/current/fullchain.pem" 2>/dev/null) | sha1sum || echo "not_found")
  fi

  [[ "$cert_sha1" == "$le_sha1" ]] || return 2

  echo "$app"
}

letsencrypt_list_apps_and_expiry() {
  #shellcheck disable=SC2034
  declare desc="list all letsencrypt-secured apps together with their expiry date"

  # prints a tab-separated list of
  #  * app name
  #  * expiry dates as UNIX timestamp (seconds since epoch)
  #  * selected renewal grace period (in seconds)
  #  * time left on certificate (in seconds)
  #  * time until renewal (in seconds)

  for app in $(dokku_apps); do
    if [[ "$app" == "=====>" ]] || [[ "$app" == "My" ]] || [[ "$app" == "Apps" ]]; then continue; fi
    if [[ "$(letsencrypt_is_active "$app")" ]]; then
      local expiry=$(letsencrypt_get_expirydate "$app")
      local grace_period=$(config_get --global DOKKU_LETSENCRYPT_GRACEPERIOD || config_get "$app" DOKKU_LETSENCRYPT_GRACEPERIOD || echo $((60 * 60 * 24 * 30)))
      local time_to_expiry=$((expiry - $(date +%s)))
      local time_to_renewal=$((expiry - grace_period - $(date +%s)))
      echo -e "$app\t$expiry\t$grace_period\t$time_to_expiry\t$time_to_renewal"
    fi
  done
}

letsencrypt_configure_and_get_dir() {
  #shellcheck disable=SC2034
  declare desc="assemble lego command line arguments and create a config hash directory for them"

  local app="$1" acme_port="$2"

  local app_root="$DOKKU_ROOT/$app"
  local le_root="$app_root/letsencrypt"
  mkdir -p "$DOKKU_ROOT/$app/letsencrypt/account"

  eval "$(config_export global)"
  eval "$(config_export app "$app")"

  # build up a string of all certificate-controlling configuration settings.
  # this will be used to determine the folder name for the account key and certificates

  # get the selected ACME server
  local server=${DOKKU_LETSENCRYPT_SERVER:-default}
  if [ -z "$server" ] || [ "$server" == "default" ]; then
    server="https://acme-v02.api.letsencrypt.org/directory"
  elif [ "$server" == "staging" ]; then
    server="https://acme-staging-v02.api.letsencrypt.org/directory"
  fi

  # construct domain arguments
  local domains="$(get_app_domains "$app")"
  local domain_args=''
  for domain in $domains; do
    dokku_log_verbose " - Domain '$domain'" >&2
    domain_args="$domain_args --domains $domain"
  done

  eval "$(config_export global)"
  eval "$(config_export app "$app")"
  local graceperiod="${DOKKU_LETSENCRYPT_GRACEPERIOD:-$((60 * 60 * 24 * 30))}"
  local extra_args="$(config_get --global DOKKU_LETSENCRYPT_ARGS || config_get "$app" DOKKU_LETSENCRYPT_ARGS || echo '')"
  local config="--pem --http --accept-tos --cert.timeout $graceperiod --path /certs --server $server --email $DOKKU_LETSENCRYPT_EMAIL $extra_args $domain_args"

  local config_hash=$(echo "$config" | sha1sum | awk '{print $1}')
  local config_dir="$le_root/certs/$config_hash"
  mkdir -p "$config_dir"

  # store config settings
  echo "--http.port :$acme_port $config" >"$config_dir/config"

  # respond using a "relative" address based on the dokku home.
  echo "$app/letsencrypt/certs/$config_hash"
}

letsencrypt_get_email() {
  #shellcheck disable=SC2034
  declare desc="Check if an e-mail address is provided globally or for the app"
  declare APP="$1"

  eval "$(config_export global)"
  if [[ -n "$DOKKU_LETSENCRYPT_EMAIL" ]]; then
    echo "$DOKKU_LETSENCRYPT_EMAIL"
    return
  fi

  eval "$(config_export app "$APP")"
  echo "$DOKKU_LETSENCRYPT_EMAIL"
}

letsencrypt_check_email() {
  #shellcheck disable=SC2034
  declare desc="Check if an e-mail address is provided globally or for the app"
  declare APP="$1"

  # check we have a valid e-mail address
  if [[ -z "$(letsencrypt_get_email "$APP")" ]]; then
    dokku_log_warn "ERROR: Cannot request a certificate without an e-mail address!"
    dokku_log_warn "  please provide your e-mail address using"
    dokku_log_warn "  dokku config:set --no-restart $APP DOKKU_LETSENCRYPT_EMAIL=<e-mail>"
    return 1
  fi
}


letsencrypt_acmeproxy_on() {
  #shellcheck disable=SC2034
  declare desc="enable ACME proxy for an app"
  local app="$1"
  local acme_port="$2"

  local app_root="$DOKKU_ROOT/$app"
  local app_config_dir="$app_root/nginx.conf.d"

  dokku_log_info1 "Enabling ACME proxy for ${app}..."

  # ensure the nginx.conf.d directory exists
  [[ -d "$app_config_dir" ]] || mkdir "$app_config_dir"

  # insert acme_port into config template, place resulting config in nginx.conf.d
  sigil -f "$PLUGIN_AVAILABLE_PATH/letsencrypt/templates/letsencrypt.conf.sigil" \
    ACME_PORT="$acme_port" \
    >"$app_config_dir/letsencrypt.conf"

  restart_nginx | sed "s/^/       /"
}

letsencrypt_acmeproxy_off() {
  #shellcheck disable=SC2034
  declare desc="disable ACME proxy for an app"
  local app="$1"

  local app_root="$DOKKU_ROOT/$app"
  local app_config_dir="$app_root/nginx.conf.d"

  dokku_log_info1 "Disabling ACME proxy for $app..."

  [[ -f "$app_config_dir/letsencrypt.conf" ]] && rm "$app_config_dir/letsencrypt.conf"

  restart_nginx | sed "s/^/       /"
}

letsencrypt_link() {
  #shellcheck disable=SC2034
  declare desc="symlink let's encrypt certificates so they can be found by dokku"

  local app="$1"
  local config_dir="$2"

  local app_root="$DOKKU_ROOT/$app"
  local le_root="$app_root/letsencrypt"
  local domain

  dokku_log_info1 "Installing let's encrypt certificates"

  # link the current config directory to 'current'
  ln -nsf "$config_dir" "$le_root/certs/current"

  # install the let's encrypt certificate for the app
  unset DOKKU_APP_NAME
  domain="$(get_app_domains "$app" | xargs | awk '{print $1}')"
  dokku certs:add "$app" "$config_dir/certificates/$domain.pem" "$config_dir/certificates/$domain.key"
  rm -f "$app_root/tls/server.letsencrypt.crt" "$app_root/tls/server.crt"
  cp "$config_dir/certificates/$domain.crt" "$app_root/tls/server.letsencrypt.crt"
  cp "$config_dir/certificates/$domain.crt" "$app_root/tls/server.crt"
}

letsencrypt_acme() {
  #shellcheck disable=SC2034
  declare desc="perform actual ACME validation procedure"
  declare app="$1" acme_port="$2"
  local FAKE_NGINX_CONF=false

  if [[ ! -f "$DOKKU_ROOT/$app/nginx.conf" ]]; then
    FAKE_NGINX_CONF=true
  fi

  letsencrypt_create_root "$app"

  dokku_log_info1 "Getting letsencrypt certificate for ${app}..."

  # read arguments from appropriate config file into the config array
  local config_dir=$(letsencrypt_configure_and_get_dir "$app" "$acme_port")
  local config_dir_in_pod="/mnt/dokku/home/dokku/$config_dir"
  local config_dir_on_host="$DOKKU_HOST_ROOT/$config_dir"
  read -r -a config <"$config_dir_in_pod/config"

  # run letsencrypt as a docker container using "certonly" mode
  # port 80 of the standalone webserver will be forwarded by the proxy
  set +e
  export DOKKU_UID=$(id -u)
  export DOKKU_GID=$(id -g)
  docker run --rm \
    "$PERMISSIONS_CALLS" \
    --user $DOKKU_UID:$DOKKU_GID \
    -p "$acme_port:$acme_port" \
    -v "$config_dir_on_host:/certs" \
    "${PLUGIN_IMAGE}:${PLUGIN_IMAGE_VERSION}" \
    "${config[@]}" run | sed "s/^/       /"

  local exit_code=$?
  set -e

  if [[ "$FAKE_NGINX_CONF" == "true" ]]; then
    rm "$DOKKU_ROOT/$app/nginx.conf"
  fi

  if [[ $exit_code != 0 ]]; then
    dokku_log_info1 "Certificate retrieval failed!"
    return $exit_code
  fi

  # got certificate
  dokku_log_info1 "Certificate retrieved successfully."
  letsencrypt_link "$app" "$container_config_dir"
  nginx_build_config "$app"
}

fn-lentsencrypt-enable() {
  declare APP="$1"
  local EXIT_CODE=0
  local acme_port domain

  verify_app_name "$APP"

  domain="$(get_app_domains "$APP" | xargs | awk '{print $1}')"
  if [[ -z "$domain" ]]; then
    dokku_log_warn "No domains detected for $APP"
    return 1
  fi

  dokku_log_info2 "Enabling letsencrypt for $APP"

  # dynamically choose a port for the letsencrypt standalone authenticator
  challenge_mode="HTTP-01"
  dns_provider="$(fn-letsencrypt-computed-dns-provider "$APP")"
  if [[ -n "$dns_provider" ]]; then
    challenge_mode="DNS-01"
  fi
  dokku_log_info1 "Revoking letsencrypt certificate for ${APP} via ${challenge_mode}"
  local acme_port="$(plugn trigger ports-get-available)"
  if [[ -z "$acme_port" ]]; then
    acme_port="$(get_available_port)"
  fi

  letsencrypt_check_email "$APP"

  letsencrypt_acmeproxy_on "$APP" "$acme_port"
  letsencrypt_acme "$APP" "$acme_port" || EXIT_CODE=$? # remove ACME proxy even if this fails
  letsencrypt_acmeproxy_off "$APP"

  if [[ "$EXIT_CODE" == 0 ]]; then
    dokku_log_info1 "Done"
    return
  fi

  dokku_log_warn "Failed to setup letsencrypt"
  DOKKU_FAIL_EXIT_CODE="$EXIT_CODE" dokku_log_fail "Check log output for further information on failure"
}

cmd-letsencrypt-enable() {
  #shellcheck disable=SC2034
  declare desc="Enable or renew letsencrypt for an app"
  declare cmd="letsencrypt:enable"
  [[ "$1" == "$cmd" ]] && shift 1

  # Support --app/$DOKKU_APP_NAME flag by reordering args into "$cmd $DOKKU_APP_NAME $@"
  local argv=("$@")
  [[ -n "$DOKKU_APP_NAME" ]] && set -- $DOKKU_APP_NAME $@
  ##

  declare APP="$1"
  if [[ "$APP" == "--all" ]]; then
    for app in $(dokku_apps); do
      fn-lentsencrypt-enable "$app"
    done
  else
    fn-lentsencrypt-enable "$APP"
  fi
}

cmd-letsencrypt-enable "$@"
